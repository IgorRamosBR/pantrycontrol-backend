// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/services/productService.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	gomock "github.com/golang/mock/gomock"
	dto "pantrycontrol-backend/internal/domain/dto"
	entities "pantrycontrol-backend/internal/domain/entities"
	reflect "reflect"
)

// MockProductService is a mock of ProductService interface
type MockProductService struct {
	ctrl     *gomock.Controller
	recorder *MockProductServiceMockRecorder
}

// MockProductServiceMockRecorder is the mock recorder for MockProductService
type MockProductServiceMockRecorder struct {
	mock *MockProductService
}

// NewMockProductService creates a new mock instance
func NewMockProductService(ctrl *gomock.Controller) *MockProductService {
	mock := &MockProductService{ctrl: ctrl}
	mock.recorder = &MockProductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProductService) EXPECT() *MockProductServiceMockRecorder {
	return m.recorder
}

// FindProducts mocks base method
func (m *MockProductService) FindProducts() ([]entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProducts")
	ret0, _ := ret[0].([]entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProducts indicates an expected call of FindProducts
func (mr *MockProductServiceMockRecorder) FindProducts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProducts", reflect.TypeOf((*MockProductService)(nil).FindProducts))
}

// FindProductById mocks base method
func (m *MockProductService) FindProductById(id string) (entities.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductById", id)
	ret0, _ := ret[0].(entities.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductById indicates an expected call of FindProductById
func (mr *MockProductServiceMockRecorder) FindProductById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductById", reflect.TypeOf((*MockProductService)(nil).FindProductById), id)
}

// SaveProduct mocks base method
func (m *MockProductService) SaveProduct(productDTO dto.ProductDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProduct", productDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProduct indicates an expected call of SaveProduct
func (mr *MockProductServiceMockRecorder) SaveProduct(productDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProduct", reflect.TypeOf((*MockProductService)(nil).SaveProduct), productDTO)
}

// UpdateProduct mocks base method
func (m *MockProductService) UpdateProduct(id string, productDTO dto.ProductDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", id, productDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct
func (mr *MockProductServiceMockRecorder) UpdateProduct(id, productDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductService)(nil).UpdateProduct), id, productDTO)
}

// DeleteProduct mocks base method
func (m *MockProductService) DeleteProduct(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct
func (mr *MockProductServiceMockRecorder) DeleteProduct(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductService)(nil).DeleteProduct), id)
}
